
import os
from datetime import datetime, timedelta
import telebot
from telebot import types
from apscheduler.schedulers.background import BackgroundScheduler

TOKEN = os.getenv('TELEGRAM_TOKEN')
bot = telebot.TeleBot(TOKEN)

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
admin_ids = [509049673]  # –¢–≤–æ–π Telegram ID ‚Äî –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
staff = {
    'venue': {},   # –ó–∞–≤–µ–¥–µ–Ω–∏–µ
    'hookah': {},  # –ö–∞–ª—å—è–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
    'admin': {}    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
}

welcome_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ‚ú® –≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –Ω–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —á–∞–µ–≤—ã–º–∏."
delayed_message = "–ï—Å–ª–∏ –≤–∞–º —É –Ω–∞—Å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –Ω–∞—Å –≤ 2–ì–ò–°, –±—É–¥–µ–º —Ä–∞–¥—ã! ‚ò∫Ô∏è"

# ==== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ====
scheduler = BackgroundScheduler()
scheduler.start()

# ==== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ ====
def is_admin(user_id):
    return user_id in admin_ids

# ==== –ö–æ–º–∞–Ω–¥–∞ /start ====
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, welcome_message)

    scheduler.add_job(
        lambda: bot.send_message(message.chat.id, delayed_message),
        'date',
        run_date=datetime.now() + timedelta(seconds=60),
        id=str(message.chat.id),
        replace_existing=True  # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç ID
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("–ó–∞–≤–µ–¥–µ–Ω–∏–µ", "–ö–∞–ª—å—è–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Äüí®", "–ú–µ–Ω–µ–¥–∂–µ—Äüí´")
    bot.send_message(message.chat.id, "–ö–æ–≥–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –æ—Ç–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å?", reply_markup=markup)

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ ====
@bot.message_handler(func=lambda m: m.text in ["–ó–∞–≤–µ–¥–µ–Ω–∏–µ", "–ö–∞–ª—å—è–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Äüí®", "–ú–µ–Ω–µ–¥–∂–µ—Äüí´"])
def handle_role(message):
    role_map = {
        "–ó–∞–≤–µ–¥–µ–Ω–∏–µ": "venue",
        "–ö–∞–ª—å—è–Ω–Ω—ã–π –º–∞—Å—Ç–µ—Äüí®": "hookah",
        "–ú–µ–Ω–µ–¥–∂–µ—Äüí´": "admin"
    }
    role = role_map[message.text]
    if staff[role]:
        response = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n"
        for name, link in staff[role].items():
            response += f"{name}: {link}\n"
    else:
        response = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."
    bot.send_message(message.chat.id, response)

# ==== –ö–æ–º–∞–Ω–¥–∞ /add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ====
@bot.message_handler(commands=['add'])
def add_staff(message):
    if not is_admin(message.from_user.id):
        return
    try:
        _, role, name, link = message.text.split(maxsplit=3)
        if role in staff:
            staff[role][name] = link
            bot.reply_to(message, f"{name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ {role}!")
        else:
            bot.reply_to(message, "–†–æ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å: venue, hookah –∏–ª–∏ admin.")
    except:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add [role] [name] [link]")

# ==== –ö–æ–º–∞–Ω–¥–∞ /remove ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ====
@bot.message_handler(commands=['remove'])
def remove_staff(message):
    if not is_admin(message.from_user.id):
        return
    try:
        _, role, name = message.text.split(maxsplit=2)
        if role in staff and name in staff[role]:
            del staff[role][name]
            bot.reply_to(message, f"{name} —É–¥–∞–ª—ë–Ω –∏–∑ {role}.")
        else:
            bot.reply_to(message, "–¢–∞–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /remove [role] [name]")

# ==== –ö–æ–º–∞–Ω–¥–∞ /setwelcome ====
@bot.message_handler(commands=['setwelcome'])
def set_welcome(message):
    if not is_admin(message.from_user.id):
        return
    global welcome_message
    welcome_message = message.text.replace("/setwelcome", "").strip()
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

# ==== –ö–æ–º–∞–Ω–¥–∞ /setfollowup ====
@bot.message_handler(commands=['setfollowup'])
def set_followup(message):
    if not is_admin(message.from_user.id):
        return
    global delayed_message
    delayed_message = message.text.replace("/setfollowup", "").strip()
    bot.reply_to(message, "–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

# ==== –ö–æ–º–∞–Ω–¥–∞ /addadmin ====
@bot.message_handler(commands=['addadmin'])
def add_admin(message):
    if not is_admin(message.from_user.id):
        return
    try:
        _, user_id = message.text.split()
        admin_ids.append(int(user_id))
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
    except:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /addadmin [user_id]")

# ==== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====
bot.polling(none_stop=True, interval=0)
